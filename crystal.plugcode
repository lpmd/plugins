
@plugin crystal : "The crystal plugin generates a crystalline stuctre of the type\n
                   fcc, bcc, hcp, or single cubic."
@author "GNM <gnm.cl>"
@version 3.0

@parameter nx (integer) : "Number of repetitions along the X axis"
@parameter ny (integer) : "Number of repetitions along the Y axis"
@parameter nz (integer) : "Number of repetitions along the Z axis"
@parameter a (real) unit angstrom : "Lattice parameter"
@parameter type (string) : "Type of crystalline structure. Allowed types are bcc, fcc, sc, and hcp."

// This is a fragment of a control file used as an example of the 
// typical usage of the plugin
@example
 input fcc a=5.260 nx=7 ny=7 nz=7
 input bcc a=4.320 nx=5 ny=5 nz=8
@end

@slot Generate (modifier)
{
 long cind = 0;
 if (strcmp(type,"fcc")==0 || strcmp(type,"FCC")==0)//TODO:Check why not at origin.
 {
  for (int k=0;k<nz;k++)
  {
   for (int j=0;j<ny;j++)
   {
    for (int i=0;i<nx;i++)
    {
     AddAtom("pos index", Vector(k*a+0.5*a, j*a+0.5*a, i*a+0.5*a), cind++);
     AddAtom("pos index", Vector(k*a+0.5*a, j*a, i*a+a), cind++);
     AddAtom("pos index", Vector(k*a+a, j*a, i*a+0.5*a), cind++);
     AddAtom("pos index", Vector(k*a+a, j*a+0.5*a, i*a+a), cind++);
    }
   }
  }
 }
 if (strcmp(type,"bcc")==0 || strcmp(type,"BCC")==0)
 {
  for (int k=0;k<nz;k++)
  {
   for (int j=0;j<ny;j++)
   {
    for (int i=0;i<nx;i++)
    {
     AddAtom("pos index", Vector(k*a, j*a, i*a), cind++);
     AddAtom("pos index", Vector(k*a+0.5*a, j*a+0.5*a, i*a+0.5*a), cind++);
    }
   }
  }
 }
 if (strcmp(type,"hcp")==0 || strcmp(type,"HCP")==0)
 {
  for (int k=0;k<nz;k++)
  {
   for (int j=0;j<ny;j++)
   {
    for (int i=0;i<nx;i++)
    {
     AddAtom("pos index", Vector((k+(2.0/3.0))*a, (j+(1.0/3.0))*a, (i+(3.0/4.0))*a), cind++)
     AddAtom("pos index", Vector((k+(1.0/3.0))*a, (j+(2.0/3.0))*a, (i+(2.0/3.0))*a), cind++);
    }
   }
  }
 }
 if (strcmp(type,"sc")==0 || strcmp(type,"SC")==0)
 {
  for (int k=0;k<nz;k++)
  {
   for (int j=0;j<ny;j++)
   {
    for (int i=0;i<nx;i++)
    {
     AddAtom("pos index", Vector(k*a, j*a, i*a), cind++);
    }
   }
  }
 }
  
}

